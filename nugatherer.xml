<?xml version="1.0" encoding="UTF-8"?>
<project name="nugatherer" default="all">
  
  
  <property file="nugatherer.properties"/>
  <!-- Uncomment the following property if no tests compilation is needed -->
  <!-- 
  <property name="skip.tests" value="true"/>
   -->
  
  <!-- Compiler options -->
  
  <property name="compiler.debug" value="on"/>
  <property name="compiler.generate.no.warnings" value="off"/>
  <property name="compiler.args" value=""/>
  <property name="compiler.max.memory" value="700m"/>
  <patternset id="ignored.files">
    <exclude name="**/*.hprof/**"/>
    <exclude name="**/*.pyc/**"/>
    <exclude name="**/*.pyo/**"/>
    <exclude name="**/*.rbc/**"/>
    <exclude name="**/*~/**"/>
    <exclude name="**/.DS_Store/**"/>
    <exclude name="**/.git/**"/>
    <exclude name="**/.hg/**"/>
    <exclude name="**/.svn/**"/>
    <exclude name="**/CVS/**"/>
    <exclude name="**/RCS/**"/>
    <exclude name="**/SCCS/**"/>
    <exclude name="**/__pycache__/**"/>
    <exclude name="**/_svn/**"/>
    <exclude name="**/rcs/**"/>
    <exclude name="**/vssver.scc/**"/>
    <exclude name="**/vssver2.scc/**"/>
  </patternset>
  <patternset id="library.patterns">
    <include name="*.war"/>
    <include name="*.swc"/>
    <include name="*.apk"/>
    <include name="*.zip"/>
    <include name="*.ear"/>
    <include name="*.egg"/>
    <include name="*.ane"/>
    <include name="*.jar"/>
  </patternset>
  <patternset id="compiler.resources">
    <include name="**/?*.properties"/>
    <include name="**/?*.xml"/>
    <include name="**/?*.gif"/>
    <include name="**/?*.png"/>
    <include name="**/?*.jpeg"/>
    <include name="**/?*.jpg"/>
    <include name="**/?*.html"/>
    <include name="**/?*.dtd"/>
    <include name="**/?*.tld"/>
    <include name="**/?*.ftl"/>
  </patternset>
  
  <!-- JDK definitions -->
  
  <property name="jdk.bin.1.8" value="${jdk.home.1.8}/bin"/>
  <path id="jdk.classpath.1.8">
    <fileset dir="${jdk.home.1.8}">
      <include name="jre/lib/charsets.jar"/>
      <include name="jre/lib/deploy.jar"/>
      <include name="jre/lib/ext/access-bridge-64.jar"/>
      <include name="jre/lib/ext/cldrdata.jar"/>
      <include name="jre/lib/ext/dnsns.jar"/>
      <include name="jre/lib/ext/jaccess.jar"/>
      <include name="jre/lib/ext/jfxrt.jar"/>
      <include name="jre/lib/ext/localedata.jar"/>
      <include name="jre/lib/ext/nashorn.jar"/>
      <include name="jre/lib/ext/sunec.jar"/>
      <include name="jre/lib/ext/sunjce_provider.jar"/>
      <include name="jre/lib/ext/sunmscapi.jar"/>
      <include name="jre/lib/ext/sunpkcs11.jar"/>
      <include name="jre/lib/ext/zipfs.jar"/>
      <include name="jre/lib/javaws.jar"/>
      <include name="jre/lib/jce.jar"/>
      <include name="jre/lib/jfr.jar"/>
      <include name="jre/lib/jfxswt.jar"/>
      <include name="jre/lib/jsse.jar"/>
      <include name="jre/lib/management-agent.jar"/>
      <include name="jre/lib/plugin.jar"/>
      <include name="jre/lib/resources.jar"/>
      <include name="jre/lib/rt.jar"/>
    </fileset>
  </path>
  
  <property name="project.jdk.home" value="${jdk.home.1.8}"/>
  <property name="project.jdk.bin" value="${jdk.bin.1.8}"/>
  <property name="project.jdk.classpath" value="jdk.classpath.1.8"/>
  
  
  <!-- Project Libraries -->
  
  <path id="library.agent-api.classpath">
    <pathelement location="${TeamCityDistribution}/devPackage/agent-api.jar"/>
  </path>
  
  <path id="library.common-api.classpath">
    <pathelement location="${TeamCityDistribution}/devPackage/common-api.jar"/>
    <pathelement location="${TeamCityDistribution}/devPackage/serviceMessages.jar"/>
    <pathelement location="${TeamCityDistribution}/webapps/ROOT/WEB-INF/lib/annotations.jar"/>
  </path>
  
  <path id="library.common-impl.classpath">
    <pathelement location="${TeamCityDistribution}/buildAgent/lib/common-impl.jar"/>
  </path>
  
  <path id="library.idea-openapi.classpath">
    <pathelement location="${TeamCityDistribution}/webapps/ROOT/WEB-INF/lib/jdom.jar"/>
    <pathelement location="${TeamCityDistribution}/webapps/ROOT/WEB-INF/lib/openapi.jar"/>
    <pathelement location="${TeamCityDistribution}/webapps/ROOT/WEB-INF/lib/resources_en.jar"/>
    <pathelement location="${TeamCityDistribution}/webapps/ROOT/WEB-INF/lib/trove4j.jar"/>
    <pathelement location="${TeamCityDistribution}/webapps/ROOT/WEB-INF/lib/util.jar"/>
  </path>
  
  <path id="library.idea_annotations.jar.classpath">
    <pathelement location="${TeamCityDistribution}/webapps/ROOT/WEB-INF/lib/annotations.jar"/>
  </path>
  
  <path id="library.jmock.classpath">
    <pathelement location="${basedir}/lib/jmock/hamcrest-core-1.1.jar"/>
    <pathelement location="${basedir}/lib/jmock/hamcrest-library-1.1.jar"/>
    <pathelement location="${basedir}/lib/jmock/jmock-2.5.1.jar"/>
    <pathelement location="${basedir}/lib/jmock/jmock-core-1.2.0.jar"/>
  </path>
  
  <path id="library.log4j.classpath">
    <pathelement location="${TeamCityDistribution}/webapps/ROOT/WEB-INF/lib/log4j-1.2.12.jar"/>
  </path>
  
  <path id="library.server-api.classpath">
    <pathelement location="${TeamCityDistribution}/devPackage/server-api.jar"/>
  </path>
  
  <path id="library.servlet_api.classpath">
    <pathelement location="${TeamCityDistribution}/lib/servlet-api.jar"/>
  </path>
  
  <path id="library.spring.classpath">
    <pathelement location="${TeamCityDistribution}/webapps/ROOT/WEB-INF/lib/spring-security.jar"/>
    <pathelement location="${TeamCityDistribution}/webapps/ROOT/WEB-INF/lib/spring-webmvc.jar"/>
    <pathelement location="${TeamCityDistribution}/webapps/ROOT/WEB-INF/lib/spring.jar"/>
  </path>
  
  <path id="library.standard.jar.classpath">
    <pathelement location="${TeamCityDistribution}/webapps/ROOT/WEB-INF/lib/standard.jar"/>
  </path>
  
  <path id="library.teamcity_agent_runtime.classpath">
    <fileset dir="${TeamCityDistribution}/buildAgent/lib">
      <patternset refid="library.patterns"/>
    </fileset>
  </path>
  
  <path id="library.teamcity_server_runtime.classpath">
    <fileset dir="${TeamCityDistribution}/webapps/ROOT/WEB-INF/lib">
      <patternset refid="library.patterns"/>
    </fileset>
  </path>
  
  <path id="library.test-api.classpath">
    <pathelement location="${TeamCityDistribution}/devPackage/tests/tests-support.jar"/>
  </path>
  
  <path id="library.test-api_libs.classpath">
    <pathelement location="${TeamCityDistribution}/webapps/ROOT/WEB-INF/lib/xmlrpc-2.0.1.jar"/>
    <pathelement location="${basedir}/lib/jmock/jmock-core-1.2.0.jar"/>
  </path>
  
  <path id="library.testng.classpath">
    <pathelement location="${basedir}/lib/testng/testng-5.14.1.jar"/>
  </path>
  
  <!-- Modules -->
  
  <import file="${basedir}/common/module_common.xml"/>

  <import file="${basedir}/agent/module_agent.xml"/>
  
  <import file="${basedir}/server/module_server.xml"/>
  
  <import file="${basedir}/tests/module_tests.xml"/>
  
  <target name="init" description="Build initialization">
    <!-- Perform any build initialization in this target -->
  </target>
  
  <target name="clean" depends="clean.module.common, clean.module.agent, clean.module.server, clean.module.tests, clean.artifact.common-jar, clean.artifact.plugin, clean.artifact.plugin-zip" description="cleanup all"/>
  
  <target name="build.modules" depends="init, clean, compile.module.common, compile.module.agent, compile.module.server, compile.module.tests" description="build all modules"/>
  
  <target name="init.artifacts">
    <property name="artifacts.temp.dir" value="${basedir}/__artifacts_temp"/>
    <property name="artifact.output.common-jar" value="${basedir}/out/artifacts/common_jar"/>
    <property name="artifact.output.deploy" value="${TeamCityDistribution}/../PluginDev.Data/plugins"/>
    <property name="artifact.output.plugin" value="${basedir}/out/artifacts/plugin"/>
    <property name="artifact.output.plugin-zip" value="${basedir}/out/artifacts/plugin_zip"/>
    <mkdir dir="${artifacts.temp.dir}"/>
    <property name="temp.jar.path.nuGatherer-common.jar" value="${artifacts.temp.dir}/nuGatherer-common.jar"/>
    <property name="temp.jar.path.nuGatherer.zip" value="${artifacts.temp.dir}/nuGatherer.zip"/>
    <property name="temp.jar.path.nuGatherer-agent.jar" value="${artifacts.temp.dir}/nuGatherer-agent.jar"/>
    <property name="temp.jar.path.nuGatherer-server.jar" value="${artifacts.temp.dir}/nuGatherer-server.jar"/>
    <property name="temp.jar.path.nuGatherer-resources.jar" value="${artifacts.temp.dir}/nuGatherer-resources.jar"/>
    <property name="temp.jar.path.nuGatherer.zip2" value="${artifacts.temp.dir}/1/nuGatherer.zip"/>
    <mkdir dir="${artifacts.temp.dir}/1"/>
  </target>
  
  <target name="clean.artifact.common-jar" description="clean common-jar artifact output">
    <delete dir="${artifact.output.common-jar}"/>
  </target>

  <target name="clean.artifact.plugin" description="clean plugin artifact output">
    <delete dir="${artifact.output.plugin}"/>
  </target>
  
  <target name="clean.artifact.plugin-zip" description="clean plugin-zip artifact output">
    <delete dir="${artifact.output.plugin-zip}"/>
  </target>
  
  <target name="artifact.common-jar" depends="init.artifacts, compile.module.common" description="Build &#39;common-jar&#39; artifact">
    <mkdir dir="${artifact.output.common-jar}"/>
    <jar destfile="${temp.jar.path.nuGatherer-common.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
      <zipfileset dir="${common.output.dir}"/>
    </jar>
    <copy file="${temp.jar.path.nuGatherer-common.jar}" tofile="${artifact.output.common-jar}/nuGatherer-common.jar"/>
  </target>

  <target name="artifact.plugin" depends="init.artifacts, compile.module.agent, artifact.common-jar, compile.module.server, artifact.common-jar" description="Build &#39;plugin&#39; artifact">
    <mkdir dir="${artifact.output.plugin}"/>
    <jar destfile="${temp.jar.path.nuGatherer-agent.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
      <zipfileset dir="${agent.output.dir}"/>
    </jar>
    <zip destfile="${temp.jar.path.nuGatherer.zip}">
      <zipfileset file="${temp.jar.path.nuGatherer-agent.jar}" prefix="nuGatherer/lib/"/>
      <zipfileset file="${basedir}/agent/teamcity-agent-plugin.xml" prefix="nuGatherer/"/>
      <zipfileset dir="${artifact.output.common-jar}" prefix="nuGatherer/lib/"/>
      <zipfileset file="${basedir}/tasks/NuGatherer/bin/Release/Octonica.NuGatherer.dll" prefix="nuGatherer/lib/"/>
    </zip>
    <jar destfile="${temp.jar.path.nuGatherer-server.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
      <zipfileset dir="${server.output.dir}"/>
    </jar>
    <jar destfile="${temp.jar.path.nuGatherer-resources.jar}" duplicate="preserve" filesetmanifest="mergewithoutmain">
      <zipfileset dir="${basedir}/server/resources" prefix="buildServerResources"/>
    </jar>
    <mkdir dir="${artifact.output.plugin}/agent"/>
    <copy file="${temp.jar.path.nuGatherer.zip}" tofile="${artifact.output.plugin}/agent/nuGatherer.zip"/>
    <mkdir dir="${artifact.output.plugin}/server"/>
    <copy file="${temp.jar.path.nuGatherer-server.jar}" tofile="${artifact.output.plugin}/server/nuGatherer-server.jar"/>
    <copy file="${temp.jar.path.nuGatherer-resources.jar}" tofile="${artifact.output.plugin}/server/nuGatherer-resources.jar"/>
    <copy todir="${artifact.output.plugin}/server">
      <fileset dir="${artifact.output.common-jar}"/>
    </copy>
    <copy file="${basedir}/server/teamcity-server-plugin.xml" tofile="${artifact.output.plugin}/teamcity-plugin.xml"/>
    <!--<ant antfile="" target="null" dir="">
      <property name="artifact.output.path" value="${artifact.output.plugin}"/>
    </ant>-->
  </target>
  
  <target name="artifact.plugin-zip" depends="init.artifacts, artifact.plugin" description="Build &#39;plugin-zip&#39; artifact">
    <mkdir dir="${artifact.output.plugin-zip}"/>
    <zip destfile="${temp.jar.path.nuGatherer.zip2}">
      <zipfileset dir="${artifact.output.plugin}"/>
    </zip>
    <copy file="${temp.jar.path.nuGatherer.zip2}" tofile="${artifact.output.plugin-zip}/nuGatherer.zip"/>
  </target>
  
  <target name="build.all.artifacts" depends="artifact.common-jar, init.artifacts, artifact.plugin-zip, artifact.plugin, artifact.plugin-zip" description="Build all artifacts">
    
    <!-- Delete temporary files -->
    <delete dir="${artifacts.temp.dir}"/>
  </target>
  
  <target name="all" depends="build.modules, build.all.artifacts" description="build all"/>
</project>